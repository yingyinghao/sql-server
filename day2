--SELECT: RETRIEVE
--WHERE: filter
--ORDER BY: sort
--JOIN: work on multiple tables in one query

--Aggregation functions: return a single aggregated result
--1. COUNT(): returns the number of rows


SELECT COUNT(OrderID) AS TotalNumberOfRows
FROM Orders

SELECT COUNT(*) AS TotalNumberOfRows
FROM Orders

--COUNT(*) vs. COUNT(colName): 
--COUNT(*) will include all the values both null and non null and COUNT(colName) will not 

SELECT FirstName, Region
FROM Employees

SELECT Count(Region), Count(*)
FROM Employees

-- GROUP BY: it will group rows that have same values into summary rows

--find total number of orders placed by each customers

SELECT c.ContactName, c.City, c.Country, COUNT(o.OrderID) AS TotalNumberOfOrders
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName, c.City, c.Country
ORDER BY TotalNumberOfOrders DESC


--a more complex template: 
--only retreive total order numbers where customers located in USA or Canada, and order number should be greater than or equal to 10

SELECT c.ContactName, c.City, c.Country, COUNT(o.OrderID) AS TotalNumberOfOrders
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.Country IN ('USA', 'Canada')
GROUP BY c.ContactName, c.City, c.Country
HAVING  COUNT(o.OrderID) >= 10
ORDER BY TotalNumberOfOrders DESC

--WHERE vs. HAVING
--1. Both of them are used as filters, having is applied to group as a whole but where is applied to individual rows.
--2. Where goes before aggregation, but Having goes after aggregation. 

--SQL execution order

--SELECT fields, aggregate(fields)
--FROM  table JOIN table2 ON....
--WHERE criteria -- optional
--GROUP BY fields -- when we have both aggregated and non-aggregated fields
--HAVING criteria -- optional 
--ORDER BY fields DESC -- optional

--FROM/JOIN ---> WHERE --> GROUP BY --> HAVING  ---> SELECT  --->DISCTINCT --> ORDER BY 
--                  |____________________|
--                 can not use alias from select 

SELECT c.ContactName, c.City AS Cty, c.Country, COUNT(o.OrderID) AS TotalNumberOfOrders
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.Country IN ('USA', 'Canada')
GROUP BY c.ContactName, c.City  , c.Country
HAVING  COUNT(o.OrderID) >= 10
ORDER BY TotalNumberOfOrders DESC

--3. WHERE can be used with select, update or delete statements but having can only be used in select statements

SELECT *
FROM Products

UPDATE Products
SET UnitPrice = 20
WHERE ProductID = 1

--DISTINCT: 
--COUNT DISTINCT: 

SELECT City
FROM Customers

SELECT COUNT(City), COUNT(DISTINCT City)
FROM Customers

--2. AVG(): returns average value of the numeric column
--list average revenue for each customer

SELECT c.ContactName, c.CustomerID, AVG(od.UnitPrice * od.Quantity) AS AvgRevenue
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.ContactName, c.CustomerID


--3. SUM(): 
--list sum of revenue for each customer

SELECT c.ContactName, c.CustomerID, SUM(od.UnitPrice * od.Quantity) AS SumRevenue
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.ContactName, c.CustomerID

--4. MAX(): 
--list maxinum revenue from each customer

SELECT c.ContactName, c.CustomerID, MAX(od.UnitPrice * od.Quantity) AS MaxRevenue
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.ContactName, c.CustomerID


--5.MIN(): 
--list the cheapeast product bought by each customer

SELECT c.ContactName, c.CustomerID, MIN(od.UnitPrice) AS CheapestProduct
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.ContactName, c.CustomerID


--TOP predicate: select a specific number or certain percentage of records

--retrieve top 5 most expensive products

SELECT TOP 5 ProductName, UnitPrice
FROM Products
ORDER BY UnitPrice DESC

--retrieve top 10 percent most expensive products

SELECT TOP 10 PERCENT ProductName, UnitPrice
FROM Products
ORDER BY UnitPrice DESC

--list top 5 customers who created the most total revenue

SELECT TOP 5 c.ContactName, c.CustomerID, SUM(od.UnitPrice * od.Quantity) AS SumRevenue
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID
GROUP BY c.ContactName, c.CustomerID
ORDER BY SumRevenue DESC

SELECT TOP 5 ContactName
FROM Customers

--Subquery: a select statement that is embedded in another select statement

--find the customers from the same city where Alejandra Camino lives 

SELECT ContactName, City
FROM Customers
WHERE City IN (
    SELECT City
    FROM Customers
    WHERE ContactName = 'Alejandra Camino'
)

-- Sometimes subquery and join can be used interchangebaly. 

--find customers who make any orders

--JOIN

SELECT DISTINCT c.ContactName, c.CustomerID, c.City, c.Country
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID

--Subquery

SELECT ContactName, CustomerID, City, Country
FROM Customers 
WHERE CustomerID IN
(SELECT DISTINCT CustomerID
FROM Orders)

--subquery vs. join
--1. Join can be only used in the FROM clause but subquery can be used in SELECT, FROM, WHERE, HAVING, ORDER BY 

--get the order information like which employees deal with which order but limit the employees location to London:

--JOIN

SELECT o.OrderDate, e.FirstName, e.LastName
FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID
WHERE e.City = 'London'
ORDER BY o.OrderDate, e.FirstName, e.LastName

--Subquery

SELECT o.OrderDate, (SELECT e1.FirstName FROM Employees e1 WHERE e1.EmployeeID = o.EmployeeID), (SELECT e2.LastName FROM Employees e2 WHERE e2.EmployeeID = o.EmployeeID)
FROM Orders o 
WHERE (
    SELECT e3.City
    FROM Employees e3
    WHERE e3.EmployeeID = o.EmployeeID
) IN ('London')
ORDER BY o.OrderDate, (SELECT e1.FirstName FROM Employees e1 WHERE e1.EmployeeID = o.EmployeeID), (SELECT e2.LastName FROM Employees e2 WHERE e2.EmployeeID = o.EmployeeID)

--2. Subquery is easy to undertand and maintain. 

--Let's find the customers who never placed any order

--Join 

SELECT c.CustomerID, c.ContactName, c.City, c.Country
FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL

--subquery

SELECT c.CustomerID, c.ContactName, c.City, c.Country
FROM Customers c 
WHERE CustomerID NOT IN(
    SELECT DISTINCT CustomerID
    FROM Orders
)

--3. Usually join has a better performance than a subquery.

--physical joins: hash join, merge join, neested loop join 

--find those custoemrs who have never placed any order

--Join 

SELECT c.CustomerID, c.ContactName, c.City, c.Country
FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL


--subquery

SELECT c.CustomerID, c.ContactName, c.City, c.Country
FROM Customers c 
WHERE CustomerID NOT IN(
    SELECT DISTINCT CustomerID
    FROM Orders
)

--Correlated Subquery: Inner query that is dependent on the outer query. 

--Customer name and total number of orders by customer

--JOIN

SELECT c.ContactName, COUNT(O.OrderID) AS TotalNumOfOrders
FROM Customers c Left Join Orders o ON c.CustomerID = o.CustomerID
GROUP BY  c.ContactName
ORDER BY TotalNumOfOrders DESC

--Subquery

SELECT c.ContactName, (SELECT COUNT(o.OrderID) FROM Orders o WHERE o.CustomerID = c.CustomerID ) AS TotalNumOfOrders
FROM Customers c
Order BY TotalNumOfOrders DESC


--derived table: The subquery in the FROM clause. 

SELECT dt.CustomerID, dt.ContactName
FROM (SELECT * 
FROM Customers ) dt

--get customers information and the number of orders made by each customer

--JOIN

SELECT c.ContactName, c.City, c.Country, COUNT(O.OrderID) AS TotalNumOfOrders
FROM Customers c Left Join Orders o ON c.CustomerID = o.CustomerID
GROUP BY  c.ContactName, c.City, c.Country
ORDER BY TotalNumOfOrders DESC

---derived table

SELECT c.ContactName, c.City, c.Country, dt.TotalNumOfOrders
FROM Customers c LEFT JOIN (
    SELECT CustomerID, COUNT(OrderID) AS TotalNumOfOrders
    FROM Orders
    GROUP BY CustomerID
) dt ON c.CustomerID = dt.CustomerID
ORDER BY dt.TotalNumOfOrders DESC


--Union vs. Union ALL: used to combine different result sets vertically by adding rows from multiple result sets together. 

--common features:
--1. Both are used to combine result sets vertically. 


SELECT City, Country
FROM Customers
UNION
SELECT City, Country
FROM Employees

SELECT City, Country
FROM Customers
UNION ALL
SELECT City, Country
FROM Employees

--2. They follow the same criteria. 
    --i. the number of the columns must be the same. 
        SELECT City, Country, Region
        FROM Customers
        UNION ALL
        SELECT City, Country
        FROM Employees
         

    --ii. The data type of each column must be identical. 

        SELECT City, Country, Region
        FROM Customers
        UNION 
        SELECT City, Country, EmployeeID
        FROM Employees

--Differences
--1. Union will remove duplicate values but Union All will not. 
--2. Union will sort the data in the first column automatically but UNION ALL will not. 
--3. Union can not be used in recursive cte but Union All can be. 

--Window Function: 

--RANK(): gives a rank based on certain order; when there is a tie, there will be a value gap

--rank for product price

SELECT ProductID, ProductName, UnitPrice, RANK() OVER(ORDER BY UnitPrice DESC) RNK
FROM Products

--product with the 2nd highest price 

SELECT dt.ProductID, dt.ProductName, dt.UnitPrice, dt.RNK
FROM (SELECT ProductID, ProductName, UnitPrice, RANK() OVER(ORDER BY UnitPrice DESC) RNK
FROM Products) dt
WHERE dt.RNK = 2


--DENSE_RANK():if you don't want any value gap, then go with dense rank

SELECT ProductID, ProductName, UnitPrice, RANK() OVER(ORDER BY UnitPrice DESC) RNK,  DENSE_RANK() OVER(ORDER BY UnitPrice DESC) DenseRNK
FROM Products


--ROW_NUMBER(): it will just return the ranking of the sorted record starting from 1. 

SELECT ProductID, ProductName, UnitPrice, RANK() OVER(ORDER BY UnitPrice DESC) RNK,  DENSE_RANK() OVER(ORDER BY UnitPrice DESC) DenseRNK,
ROW_NUMBER()  OVER(ORDER BY UnitPrice DESC) ROW_NUMBER
FROM Products


--partition by: used in conjuction with sql server

--list customers from every country with the ranking for number of orders

SELECT c.ContactName, c.Country, Count(o.OrderID) AS TotalNumOfOrders, RANK() OVER(PARTITION BY c.Country ORDER BY Count(o.OrderID) ) RNK 
FROM Customers c JOIN Orders o ON c.CustomerID = O.CustomerID
GROUP BY  c.ContactName, c.Country

--- find top 3 customers from every country with maximum orders

SELECT dt.ContactName, dt.Country, dt.TotalNumOfOrders, dt.RNK
FROM (
    SELECT c.ContactName, c.Country, Count(o.OrderID) AS TotalNumOfOrders, RANK() OVER(PARTITION BY c.Country ORDER BY Count(o.OrderID) DESC) RNK 
FROM Customers c JOIN Orders o ON c.CustomerID = O.CustomerID
GROUP BY  c.ContactName, c.Country
) dt
WHERE dt.RNK <=3

--cte: common table expression: temporary named result set to make our query more readable. 

SELECT c.ContactName, c.City, c.Country, dt.TotalNumOfOrders
FROM Customers c LEFT JOIN (
    SELECT CustomerID, COUNT(OrderID) AS TotalNumOfOrders
    FROM Orders
    GROUP BY CustomerID
) dt ON c.CustomerID = dt.CustomerID
ORDER BY dt.TotalNumOfOrders DESC


WITH  OrderCntCTE
AS(
    SELECT CustomerID, COUNT(OrderID) AS TotalNumOfOrders
    FROM Orders
    GROUP BY CustomerID
)
SELECT c.ContactName, c.City, c.Country, cte.TotalNumOfOrders
FROM Customers c LEFT JOIN OrderCntCTE cte ON c.CustomerID = cte.CustomerID


--lifecycle: has to be created and used in the next selct statement right away; has to be created and used in one batch


--recursive CTE:  a cte that calls itself recursively

--1. Initalization
--2. Recursive rule

SELECT EmployeeID, FirstName, ReportsTo
FROM Employees

--level 1: Andrew
--level 2: Nancy, Janet, Margaret, Steven, Laura
--level 3: Micahel, Robert, Anne

WITH EmpHierarchyCTE
AS(
    SELECT EmployeeID, FirstName, ReportsTo, 1 Level
    FROM Employees
    WHERE ReportsTo IS NULL
    UNION ALL
    SELECT e.EmployeeID, e.FirstName, e.ReportsTo, cte.Level + 1
    FROM Employees e INNER JOIN EmpHierarchyCTE cte ON e.ReportsTo = cte.EmployeeID

)
SELECT * FROM EmpHierarchyCTE
